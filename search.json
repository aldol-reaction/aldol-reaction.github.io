[{"title":"test","url":"/posts/d87f7e0c/","content":"<p>测试。</p>\r\n<p><img src=\"https://cdn.jsdelivr.net/gh/aldol-reaction/atom.img@main/img/20220720121506.png\"></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"test\">test</h2>\r\n<h3 id=\"test-1\">test</h3>\r\n<h4 id=\"test-2\">test</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// #define _GLIBCXX_DEBUG</span></span><br><span class=\"line\"><span class=\"comment\">// #define STRESS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> db;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">double</span> ldb;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> set&lt;<span class=\"type\">int</span>&gt; si;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector&lt;<span class=\"type\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mii;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> STRESS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"function\">mt19937 <span class=\"title\">rr</span><span class=\"params\">(chrono::system_clock::now().time_since_epoch().count())</span></span>;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">r</span><span class=\"params\">(ll L, ll R)</span> </span>{<span class=\"function\">uniform_int_distribution&lt;ll&gt; <span class=\"title\">dist</span><span class=\"params\">(L, R)</span></span>; <span class=\"keyword\">return</span> <span class=\"built_in\">dist</span>(rr);}</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">\"DEBUG.cpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbg(...) { }</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> union(a, b, res) set_union(a.begin(), a.end(), b.begin(), b.end(), inserter(res, res.end()));</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> intersection(a, b, res) set_intersection(a.begin(), a.end(), b.begin(), b.end(), inserter(res, res.end()));</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> difference(a, b, res) set_difference(a.begin(), a.end(), b.begin(), b.end(), inserter(res, res.end()));</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> symmetric_difference(a, b, res) set_symmetric_difference(a.begin(), a.end(), b.begin(), b.end(), inserter(res, res.end()));</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, a, n) for(int i = (a); i &lt;= (n); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> per(i, a, n) for(int i = (a); i &gt;= (n); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IOS ios::sync_with_stdio(0); cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mst(a, b) memset((a), (b), sizeof(a));</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> tem template<span class=\"string\">&lt;class T&gt;</span> inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sz(v) ((int)(v).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> linf 0x3f3f3f3f3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inf 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> space putchar(<span class=\"string\">' '</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> enter puts(<span class=\"string\">\"\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> endl <span class=\"string\">'\\n'</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ls (u &lt;&lt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rs (u &lt;&lt; 1 | 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class=\"line\"><span class=\"type\">const</span> pii dir[] = { {<span class=\"number\">1</span>, <span class=\"number\">0</span>}, { <span class=\"number\">-1</span>, <span class=\"number\">0</span>}, {<span class=\"number\">0</span>, <span class=\"number\">1</span>}, {<span class=\"number\">0</span>, <span class=\"number\">-1</span>}};</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> uint mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a, ll b)</span> </span>{<span class=\"built_in\">assert</span>(b &gt;= <span class=\"number\">0</span>); ll r = <span class=\"number\">1</span>; <span class=\"keyword\">for</span>(; b; b &gt;&gt;= <span class=\"number\">1</span>) {<span class=\"keyword\">if</span>(b &amp; <span class=\"number\">1</span>) r = r * a % mod; a = a * a % mod;} <span class=\"keyword\">return</span> r;}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">inv</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(x, mod - <span class=\"number\">2</span>);}</span><br><span class=\"line\"><span class=\"function\">tem <span class=\"type\">bool</span> <span class=\"title\">chkmax</span><span class=\"params\">(T &amp;a, T b)</span> </span>{<span class=\"keyword\">if</span>(a &lt; b) {a = b; <span class=\"keyword\">return</span> <span class=\"number\">1</span>;} <span class=\"keyword\">return</span> <span class=\"number\">0</span>;}</span><br><span class=\"line\"><span class=\"function\">tem <span class=\"type\">bool</span> <span class=\"title\">chkmin</span><span class=\"params\">(T &amp;a, T b)</span> </span>{<span class=\"keyword\">if</span>(a &gt; b) {a = b; <span class=\"keyword\">return</span> <span class=\"number\">1</span>;} <span class=\"keyword\">return</span> <span class=\"number\">0</span>;}</span><br><span class=\"line\"><span class=\"function\">tem <span class=\"type\">int</span> <span class=\"title\">sgn</span><span class=\"params\">(T x)</span> </span>{<span class=\"keyword\">return</span> x &gt; eps ? <span class=\"number\">1</span> : (x &lt; -eps ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>);}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">msb</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> x ? <span class=\"number\">63</span> - __builtin_clzll(x) : <span class=\"number\">-1</span>;}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lsb</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> x ? __builtin_ctzll(x) : <span class=\"number\">64</span>;}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">popcnt</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> __builtin_popcountll(x);}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">p2</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> <span class=\"number\">1ll</span> &lt;&lt; x;}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> x &amp; -x;}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">sq</span><span class=\"params\">(<span class=\"type\">const</span> ll &amp;x)</span> </span>{<span class=\"keyword\">return</span> x * x;}</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">\"D:\\\\Chrome Downloadings\\\\input.txt\"</span>, <span class=\"string\">\"r\"</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">\"D:\\\\Chrome Downloadings\\\\output.txt\"</span>, <span class=\"string\">\"w\"</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"type\">int</span> T; cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) {</span><br><span class=\"line\">        mii ma, mb;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, k; cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) cin &gt;&gt; a[i];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!ma.<span class=\"built_in\">count</span>(a[i])) ma[a[i]] = i;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!mb.<span class=\"built_in\">count</span>(a[i])) mb[a[i]] = i;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(k--) {</span><br><span class=\"line\">            <span class=\"type\">int</span> l, r; cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!ma.<span class=\"built_in\">count</span>(l) <span class=\"keyword\">or</span> !mb.<span class=\"built_in\">count</span>(r)) {</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">\"NO\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(ma[l] &lt; mb[r] ? <span class=\"string\">\"YES\"</span> : <span class=\"string\">\"NO\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n"},{"title":"博客备忘录","url":"/posts/ed1ccd58/","content":"<p>记录博客一些操作和语法。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"note-标签\">Note 标签</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">{% note %}</span><br><span class=\"line\">default 提示块标签</span><br><span class=\"line\">{% endnote %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% note primary %}</span><br><span class=\"line\">primary 提示块标签</span><br><span class=\"line\">{% endnote %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% note success %}</span><br><span class=\"line\">success 提示块标签</span><br><span class=\"line\">{% endnote %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% note info %}</span><br><span class=\"line\">info 提示块标签</span><br><span class=\"line\">{% endnote %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% note warning %}</span><br><span class=\"line\">warning 提示块标签</span><br><span class=\"line\">{% endnote %}</span><br><span class=\"line\"></span><br><span class=\"line\">{% note danger %}</span><br><span class=\"line\">danger 提示块标签</span><br><span class=\"line\">{% endnote %}</span><br></pre></td></tr></table></figure>\r\n<p>效果：</p>\r\n<div class=\"note \"><p>default 提示块标签</p>\r\n</div>\r\n<div class=\"note primary\"><p>primary 提示块标签</p>\r\n</div>\r\n<div class=\"note success\"><p>success 提示块标签</p>\r\n</div>\r\n<div class=\"note info\"><p>info 提示块标签</p>\r\n</div>\r\n<div class=\"note warning\"><p>warning 提示块标签</p>\r\n</div>\r\n<div class=\"note danger\"><p>danger 提示块标签</p>\r\n</div>\r\n","categories":["杂项"],"tags":["博客","test"]}]